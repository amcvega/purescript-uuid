// Generated by psc-bundle 0.11.4
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafeThrowException = function ($0) {
      return Control_Monad_Eff_Unsafe.unsafePerformEff(Control_Monad_Eff_Exception.throwException($0));
  };
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Control_Monad_Eff_Exception.error($1));
  };
  exports["unsafeThrow"] = unsafeThrow;
  exports["unsafeThrowException"] = unsafeThrowException;
})(PS["Control.Monad.Eff.Exception.Unsafe"] = PS["Control.Monad.Eff.Exception.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                    

  exports.fromFoldableImpl = (function () {
    // jshint maxparams: 2
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var updateAt = $foreign._updateAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  exports["foldM"] = foldM;
  exports["fromFoldable"] = fromFoldable;
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;
  exports["take"] = $foreign.take;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["fromCharArray"] = $foreign.fromCharArray;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = PS["Data.String.Regex.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Uuid = (function () {
      function Uuid(value0) {
          this.value0 = value0;
      };
      Uuid.create = function (value0) {
          return new Uuid(value0);
      };
      return Uuid;
  })();                                                                                                                                                                             
  var toHex = function (x) {
      if (x === 0) {
          return "0";
      };
      if (x === 1) {
          return "1";
      };
      if (x === 2) {
          return "2";
      };
      if (x === 3) {
          return "3";
      };
      if (x === 4) {
          return "4";
      };
      if (x === 5) {
          return "5";
      };
      if (x === 6) {
          return "6";
      };
      if (x === 7) {
          return "7";
      };
      if (x === 8) {
          return "8";
      };
      if (x === 9) {
          return "9";
      };
      if (x === 10) {
          return "a";
      };
      if (x === 11) {
          return "b";
      };
      if (x === 12) {
          return "c";
      };
      if (x === 13) {
          return "d";
      };
      if (x === 14) {
          return "e";
      };
      if (x === 15) {
          return "f";
      };
      return Control_Monad_Eff_Exception_Unsafe.unsafeThrow("not a hexadecimal: " + Data_Show.show(Data_Show.showInt)(x));
  };
  var uuidToString = function (v) {
      return (function ($11) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(toHex)($11));
      })(Data_Array.take(8)(v.value0)) + ("-" + ((function ($12) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(toHex)(Data_Array.take(4)($12)));
      })(Data_Array.drop(8)(v.value0)) + ("-" + ((function ($13) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(toHex)(Data_Array.take(4)($13)));
      })(Data_Array.drop(12)(v.value0)) + ("-" + ((function ($14) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(toHex)(Data_Array.take(4)($14)));
      })(Data_Array.drop(16)(v.value0)) + ("-" + (function ($15) {
          return Data_String.fromCharArray(Data_Functor.map(Data_Functor.functorArray)(toHex)(Data_Array.take(12)($15)));
      })(Data_Array.drop(20)(v.value0)))))))));
  };
  var splitInt32 = function (i) {
      var x8 = i & 15;
      var x7 = i >>> 4 & 15;
      var x6 = i >>> 8 & 15;
      var x5 = i >>> 12 & 15;
      var x4 = i >>> 16 & 15;
      var x3 = i >>> 20 & 15;
      var x2 = i >>> 24 & 15;
      var x1 = i >>> 28 & 15;
      return Data_Array.fromFoldable(Data_Foldable.foldableArray)([ x1, x2, x3, x4, x5, x6, x7, x8 ]);
  };
  var showUuid = new Data_Show.Show(uuidToString);
  var setVersion = function (xs) {
      var v = Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(4));
      var v$prime = v & 4 | 4;
      return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(4)(v$prime)(xs));
  };
  var setHi = function (xs) {
      var top = Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(0));
      var top$prime = top & 7 | 4;
      return Data_Maybe.fromMaybe(xs)(Data_Array.updateAt(0)(top$prime)(xs));
  };                                              
  var int128ToHexes = function (xs) {
      var a4 = splitInt32(Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(3)));
      var a3 = setHi(splitInt32(Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(2))));
      var a2 = setVersion(splitInt32(Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(1))));
      var a1 = splitInt32(Data_Maybe.fromMaybe(0)(Data_Array.index(xs)(0)));
      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(a1)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(a2)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(a3)(a4)));
  };
  var uuidV4 = function (i1) {
      return function (i2) {
          return function (i3) {
              return function (i4) {
                  return Uuid.create(int128ToHexes([ i1, i2, i3, i4 ]));
              };
          };
      };
  };
  exports["Uuid"] = Uuid;
  exports["uuidV4"] = uuidV4;
  exports["showUuid"] = showUuid;
})(PS["Data.Uuid"] = PS["Data.Uuid"] || {});
(function(exports) {
    "use strict";
  // Copyright 2014 Thom Chiovoloni, released under the MIT license.

  /// A random number generator based on the basic implementation of the PCG algorithm,
  /// as described here: http://www.pcg-random.org/
  var PcgRandom = (function() {
	  'use strict';

	  var defaultIncHi = 0x14057b7e;
	  var defaultIncLo = 0xf767814f;

	  /// Construct a random number generator.
	  function PcgRandom(seedHi, seedLo, incHi, incLo) {
		  this.setSeed(seedHi, seedLo, incHi, incLo)
	  }

	  /// Set the seed and incrementer.
	  PcgRandom.prototype.setSeed = function(seedHi, seedLo, incHi, incLo) {
		  if (seedLo == null && seedHi == null) {
			  seedLo = (Math.random() * 0xffffffff) >>> 0;
			  seedHi = 0;
		  }
		  else if (seedLo == null) {
			  seedLo = seedHi;
			  seedHi = 0;
		  }
		  if (incLo == null && incHi == null) {
			  incLo = this.state_ ? this.state_[3] : defaultIncLo;
			  incHi = this.state_ ? this.state_[2] : defaultIncHi;
		  }
		  else if (incLo == null) {
			  incLo = incHi;
			  incHi = 0;
		  }

		  this.state_ = new Int32Array([ 0, 0, incHi >>> 0, (incLo|1) >>> 0 ]);
		  this.next_();
		  add64_(this.state_, this.state_[0], this.state_[1], seedHi>>>0, seedLo>>>0);
		  this.next_();
		  return this;
	  };

	  /// Return a copy of the internal state of this random number generator as a JavaScript Array.
	  PcgRandom.prototype.getState = function() {
		  return [this.state_[0], this.state_[1], this.state_[2], this.state_[3]];
	  };

	  /// Set the state of the random number generator.
	  PcgRandom.prototype.setState = function(state) {
		  this.state_[0] = state[0];
		  this.state_[1] = state[1];
		  this.state_[2] = state[2];
		  this.state_[3] = state[3]|1;
	  };

	  // shim for Math.imul.
	  var imul = Math.imul;
	  if (!imul) {
		  imul = function(a, b) {
			  var ah = (a >>> 16) & 0xffff, al = a & 0xffff;
			  var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;
			  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
		  };
	  }

	  // multiply two 64 bit numbers (given in parts), and store the result in `out`.
	  function mul64_(out, aHi, aLo, bHi, bLo) {
		  var c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;
		  var c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;

		  var lo = ((aLo & 0xffff) * (bLo & 0xffff)) >>> 0;
		  var hi = ((aLo >>> 16) * (bLo >>> 16)) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;

		  c0 = (c0 << 16) >>> 0;
		  lo = (lo + c0) >>> 0;
		  if ((lo >>> 0) < (c0 >>> 0)) {
			  hi = (hi + 1) >>> 0;
		  }

		  c1 = (c1 << 16) >>> 0;
		  lo = (lo + c1) >>> 0;
		  if ((lo >>> 0) < (c1 >>> 0)) {
			  hi = (hi + 1) >>> 0;
		  }

		  hi = (hi + imul(aLo, bHi)) >>> 0;
		  hi = (hi + imul(aHi, bLo)) >>> 0;

		  out[0] = hi;
		  out[1] = lo;
	  }

	  // add two 64 bit numbers (given in parts), and store the result in `out`.
	  function add64_(out, aHi, aLo, bHi, bLo) {
		  var hi = (aHi + bHi) >>> 0;
		  var lo = (aLo + bLo) >>> 0;
		  if ((lo >>> 0) < (aLo >>> 0)) {
			  hi = (hi + 1) | 0;
		  }
		  out[0] = hi;
		  out[1] = lo;
	  }

	  var MUL_HI = 0x5851f42d >>> 0;
	  var MUL_LO = 0x4c957f2d >>> 0;

	  /// Generate a random 32 bit integer. This uses the PCG algorithm, described
	  /// here: http://www.pcg-random.org/
	  PcgRandom.prototype.next_ = function() {
		  // save current state (what we'll use for this number)
		  var oldHi = this.state_[0] >>> 0;
		  var oldLo = this.state_[1] >>> 0;

		  // churn LCG.
		  mul64_(this.state_, oldHi, oldLo, MUL_HI, MUL_LO);
		  add64_(this.state_, this.state_[0], this.state_[1], this.state_[2], this.state_[3]);

		  // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27
		  var xsHi = oldHi >>> 18;
		  var xsLo = ((oldLo >>> 18) | (oldHi << 14)) >>> 0;
		  xsHi = (xsHi ^ oldHi) >>> 0;
		  xsLo = (xsLo ^ oldLo) >>> 0;
		  var xorshifted = ((xsLo >>> 27) | (xsHi << 5)) >>> 0;
		  // rotate xorshifted right a random amount, based on the most sig. 5 bits
		  // bits of the old state.
		  var rot = oldHi >>> 27;
		  var rot2 = ((-rot >>> 0) & 31) >>> 0;
		  return ((xorshifted >>> rot) | (xorshifted << rot2)) >>> 0;
	  };

	  /// Get a uniformly distributed 32 bit integer between [0, max).
	  PcgRandom.prototype.integer = function(max) {
		  if (!max) {
			  return this.next_()|0;
		  }
		  max = max >>> 0;
		  if ((max & (max - 1)) === 0) {
			  return this.next_() & (max - 1); // fast path for power of 2
		  }

		  var num = 0;
		  var skew = ((-max >>> 0) % max) >>> 0;
		  for (num = this.next_(); num < skew; num = this.next_()) {
			  // this loop will rarely execute more than twice,
			  // and is intentionally empty
		  }
		  return num % max;
	  };

	  var BIT_53 = 9007199254740992.0;
	  var BIT_27 = 134217728.0;

	  /// Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with
	  /// 53 bits of precision (every bit of the mantissa is randomized).
	  PcgRandom.prototype.number = function() {
		  var hi = (this.next_() & 0x03ffffff) * 1.0;
		  var lo = (this.next_() & 0x07ffffff) * 1.0;
		  return ((hi * BIT_27) + lo) / BIT_53;
	  };

	  return PcgRandom;
  }());

  // if (typeof module !== 'undefined' && module.exports) {
  // 	module.exports = PcgRandom;
  // }

  exports.randomIntImpl = function(seed){
    var pcg = new PcgRandom(seed[0], seed[1]);
    var state = pcg.getState();
    return {answer: pcg.integer(),
            state: {hi: state[0], lo: state[1]}
           };
  };

  var crypto = window.crypto;
  exports.rand64Impl = function(){
    var array = new Int32Array(2);
    crypto.getRandomValues(array);
    return {msb: array[0], lsb: array[1]};
  };
})(PS["Random.PCG"] = PS["Random.PCG"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Random.PCG"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Seed = (function () {
      function Seed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Seed.create = function (value0) {
          return function (value1) {
              return new Seed(value0, value1);
          };
      };
      return Seed;
  })();
  var GeneratorT = function (x) {
      return x;
  };
  var showSeed = new Data_Show.Show(function (v) {
      return "Seed " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" - " + Data_Show.show(Data_Show.showInt)(v.value1)));
  });
  var runRandom = function (v) {
      return Control_Monad_State_Trans.runStateT(v);
  };
  var randomSeed = function __do() {
      var v = $foreign.rand64Impl();
      return new Seed(v.msb, v.lsb);
  };
  var randomInt = function (v) {
      var ans = $foreign.randomIntImpl(Data_Array.fromFoldable(Data_Foldable.foldableArray)([ v.value0, v.value1 ]));
      return new Data_Tuple.Tuple(ans.answer, new Seed(ans.state.hi, ans.state.lo));
  };
  var randInt = function (dictMonad) {
      return Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonad))(Control_Monad_State_Class.get(Control_Monad_State_Trans.monadStateStateT(dictMonad)))(function (v) {
          var v1 = randomInt(v);
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_State_Trans.bindStateT(dictMonad))(Control_Monad_State_Class.put(Control_Monad_State_Trans.monadStateStateT(dictMonad))(v1.value1))(function () {
              return Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonad))(v1.value0);
          });
      });
  };
  var functorGeneratorT = function (dictFunctor) {
      return new Data_Functor.Functor(function (fn) {
          return function (v) {
              return GeneratorT(Data_Functor.map(Control_Monad_State_Trans.functorStateT(dictFunctor))(fn)(v));
          };
      });
  };
  var applyGeneratorT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorGeneratorT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (v) {
          return function (v1) {
              return GeneratorT(Control_Apply.apply(Control_Monad_State_Trans.applyStateT(dictMonad))(v)(v1));
          };
      });
  };
  var bindGeneratorT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyGeneratorT(dictMonad);
      }, function (v) {
          return function (f) {
              return GeneratorT(Control_Bind.bind(Control_Monad_State_Trans.bindStateT(dictMonad))(v)(function (x) {
                  var v1 = f(x);
                  return v1;
              }));
          };
      });
  };
  var applicativeGeneratorT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyGeneratorT(dictMonad);
      }, function (x) {
          return GeneratorT(Control_Applicative.pure(Control_Monad_State_Trans.applicativeStateT(dictMonad))(x));
      });
  };
  var monadGeneratorT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeGeneratorT(dictMonad);
      }, function () {
          return bindGeneratorT(dictMonad);
      });
  };
  var array = function (dictMonad) {
      return function (n) {
          return function (fn) {
              var go = function (xs) {
                  return function (v) {
                      return Control_Bind.bind(bindGeneratorT(dictMonad))(fn)(function (v1) {
                          return Control_Applicative.pure(applicativeGeneratorT(dictMonad))(Data_Array.cons(v1)(xs));
                      });
                  };
              };
              return Data_Array.foldM(monadGeneratorT(dictMonad))(go)([  ])(Data_Array.range(1)(4));
          };
      };
  };
  exports["GeneratorT"] = GeneratorT;
  exports["Seed"] = Seed;
  exports["array"] = array;
  exports["randInt"] = randInt;
  exports["randomInt"] = randomInt;
  exports["randomSeed"] = randomSeed;
  exports["runRandom"] = runRandom;
  exports["functorGeneratorT"] = functorGeneratorT;
  exports["applyGeneratorT"] = applyGeneratorT;
  exports["applicativeGeneratorT"] = applicativeGeneratorT;
  exports["bindGeneratorT"] = bindGeneratorT;
  exports["monadGeneratorT"] = monadGeneratorT;
  exports["showSeed"] = showSeed;
})(PS["Random.PCG"] = PS["Random.PCG"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Data_Array = PS["Data.Array"];
  var Data_Function = PS["Data.Function"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Uuid = PS["Data.Uuid"];
  var Prelude = PS["Prelude"];
  var Random_PCG = PS["Random.PCG"];        
  var main = function __do() {
      var v = Random_PCG.randomSeed();
      var i = Random_PCG.randomInt(v);
      var v1 = Random_PCG.runRandom(Random_PCG.array(Control_Monad_Eff.monadEff)(4)(Random_PCG.randInt(Control_Monad_Eff.monadEff)))(v)();
      Control_Monad_Eff_Console.log("Random Ints: " + Data_Show.show(Data_Show.showArray(Data_Show.showInt))(v1.value0))();
      Control_Monad_Eff_Console.log("Seeds: " + Data_Show.show(Random_PCG.showSeed)(v))();
      var v2 = Data_Uuid.uuidV4(v1.value0);
      Control_Monad_Eff_Console.log("Hello sailor! " + Data_Show.show(Data_Show.showArray(Data_Show.showInt))(v2.value0))();
      Control_Monad_Eff_Console.log("Length: " + Data_Show.show(Data_Show.showInt)(Data_Array.length(v2.value0)))();
      return Control_Monad_Eff_Console.log("UUID: " + Data_Show.show(Data_Uuid.showUuid)(new Data_Uuid.Uuid(v2.value0)))();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
